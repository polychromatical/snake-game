{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CSC3206 Artificial Intelligence 202104 Assignment 1 Aim This assignment requires you to create agents/players to play the snake game using search algorithms. Requirements Create two agents, one using uninformed search algorithm, and another using informed search algorithm. Complete at least one of the following challenges. Additional challenges will contribute to bonus marks. One food at any time; Non-increasing snake length; Snake length of one; reaching at least 15 points One food at any time; Increasing snake length with food; Starting snake length of one; reaching at least 10 points Two food generated when no food is available on the maze; Increasing snake length with food; Starting snake length of one; reaching at least 10 points Submit a report explaining the problem formulation and the search algorithm, show and discuss the results of the agents.","title":"Overview"},{"location":"#csc3206-artificial-intelligence-202104-assignment-1","text":"","title":"CSC3206 Artificial Intelligence 202104 Assignment 1"},{"location":"#aim","text":"This assignment requires you to create agents/players to play the snake game using search algorithms.","title":"Aim"},{"location":"#requirements","text":"Create two agents, one using uninformed search algorithm, and another using informed search algorithm. Complete at least one of the following challenges. Additional challenges will contribute to bonus marks. One food at any time; Non-increasing snake length; Snake length of one; reaching at least 15 points One food at any time; Increasing snake length with food; Starting snake length of one; reaching at least 10 points Two food generated when no food is available on the maze; Increasing snake length with food; Starting snake length of one; reaching at least 10 points Submit a report explaining the problem formulation and the search algorithm, show and discuss the results of the agents.","title":"Requirements"},{"location":"controls/","text":"Game controls The snake game can be controlled in two different modes: Human mode and Agent mode. Human mode In Human mode, you will control the snake's direction using the keyboard. This mode is to help you to be familiar with the game to design the agent to solve the problem. Click or press P to start the game. Use the arrow keys \u25c2 \u25b8 \u25be \u25b4 to control the direction of the snake. Each food eaten by the snake will contribute a point. If the snake hits the wall or bites itself, the snake will die and the game is over. You may change the moving speed of the snake before you start the game or when you pause the game. Moving speed == 0 The snake will move one square with each keypress. Moving speed > 0 The snake will move according to the specified speed. The direction of the snake will be updated if any arrow key is pressed. Agent mode In Agent mode, the snake's direction will be controlled by an agent/a player/a code that you create. Choose the agent/player from the dropdown list. (Refresh the list if your agent is not in the list after you set it up correctly following the instructions in Use your script as agent/player ) Choose between Step-by-step mode or Automatic progression mode. Step-by-step When the solution is returned by the agent/player, the next game state will not be sent immediate to prompt the agent/player to provide the next solution. The agent/player will only be provided with the next game state when Next step button is clicked. Automatic progression When the solution is returned by the agent/player, the next game state will be sent immediately to prompt the agent/player to provide the next solution. No user interaction is required. Click or press P to start the game. Step-by-step The current game state will be sent to the agent/player when Next step button is clicked. Automatic progression The current game state will be sent immediately to prompt the agent/player to provide the solution. When at least one solution has been provided by the agent/player, click Show search trees to show the previous and the current game state, solution, and search tree.","title":"Game controls"},{"location":"controls/#game-controls","text":"The snake game can be controlled in two different modes: Human mode and Agent mode.","title":"Game controls"},{"location":"controls/#human-mode","text":"In Human mode, you will control the snake's direction using the keyboard. This mode is to help you to be familiar with the game to design the agent to solve the problem. Click or press P to start the game. Use the arrow keys \u25c2 \u25b8 \u25be \u25b4 to control the direction of the snake. Each food eaten by the snake will contribute a point. If the snake hits the wall or bites itself, the snake will die and the game is over. You may change the moving speed of the snake before you start the game or when you pause the game. Moving speed == 0 The snake will move one square with each keypress. Moving speed > 0 The snake will move according to the specified speed. The direction of the snake will be updated if any arrow key is pressed.","title":" Human mode"},{"location":"controls/#agent-mode","text":"In Agent mode, the snake's direction will be controlled by an agent/a player/a code that you create. Choose the agent/player from the dropdown list. (Refresh the list if your agent is not in the list after you set it up correctly following the instructions in Use your script as agent/player ) Choose between Step-by-step mode or Automatic progression mode. Step-by-step When the solution is returned by the agent/player, the next game state will not be sent immediate to prompt the agent/player to provide the next solution. The agent/player will only be provided with the next game state when Next step button is clicked. Automatic progression When the solution is returned by the agent/player, the next game state will be sent immediately to prompt the agent/player to provide the next solution. No user interaction is required. Click or press P to start the game. Step-by-step The current game state will be sent to the agent/player when Next step button is clicked. Automatic progression The current game state will be sent immediately to prompt the agent/player to provide the solution. When at least one solution has been provided by the agent/player, click Show search trees to show the previous and the current game state, solution, and search tree.","title":" Agent mode"},{"location":"player/","text":"Use your script as agent/player Code location Each agent/player is a direcotry resides in root directory > app > players directory. To create a new agent/player, create a directory in the players directory, for example, a directory with the name of super_player . The agent/player is the player.py file inside that directory. snake-game app players super_players player.py Code format The player.py file should consist of the class Player as structured as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Player (): name = \"testing player\" informed = False group = \"Children of Odin\" members = [ [ \"Thor\" , \"12834823\" ], [ \"Loki\" , \"98854678\" ], [ \"Hela\" , \"87654654\" ] ] def __init__ ( self , setup ): ... def run ( self , problem ): ... return solution , search_tree Class name The name of the class must be Player . Agent/player information Name your agent/player using the class attribute name and define if the agent/player is using informed or uninformed search with the class attribute informed . For informed search 1 informed = True For uninformed search 1 informed = False Group information Include your group information as the class attributes for the Player class. This includes your group name ( group ) and group members ( members ). __init__() function The __init__ function is the function to initiate the player. Apart from self , the function will also receive setup as an input parameter. The format of the setup is 1 2 3 4 { maze_size : [ int , int ], static_snake_length : bool } maze_size is an array of length two. The first item is the number of rows and the second item is the number of columns of the maze. static_snake_length is a boolean object to indicate if the snake length is static ( True ) or dynamic ( False ). run() function The run function is the function to implement the search algorithm. The function will take the input parameter of problem , which contains the current game state including the snake locations ( snake_locations ), current direction of the snake ( current_direction ), and the food locations ( food_locations ) in the following format: 1 2 3 4 5 { snake_locations : [[ int , int ],[ int , int ], ... ], current_direction : str , food_locations : [[ int , int ],[ int , int ], ... ], } snake_locations is an array of the locations of the snake's body, starting from the head to the tail. The locations are given in the form of the coordinates [x,y] , i.e. [column, row] , with [0,0] at the top left corner of the maze. As an example, for a maze of 5 rows and 6 columns, the top right corner is [5,0] , the bottom left corner is [0,4] , and the bottom right corner is [5,4] . current_direction is the current direction of the snake, specified as north n , south s , west w , or east e . food_locations is an array of the locations of the food on the game field. The locations are specified in the form of coordinates identical to snake_locations . The run function is expected to return two variables, solution and search_tree . solution is the series of actions for the snake from the current location to capture the food. The actions should be specified as north n , south s , west w , and east e . Each action will move the snake for 1 square in the specified direction. search_tree is the search tree that has been generated from the search algorithm the snake used to obtain the solution . search_tree should be a list of dictionary objects that gives us the information of each node in the search tree. Each object should be 1 2 3 4 5 6 7 8 9 { \"id\" : 2 , \"state\" : \"5,0,0\" , \"expansionsequence\" : 2 , \"children\" : [ 5 , 6 , 7 ], \"actions\" : [ \"src2one\" , \"src2two\" , \"one2three\" ], \"removed\" : False , \"parent\" : 1 }, id is the ID of this node, which should be unique for every node state is the state of this node, which should be a string (the display format is not constrained) expansionsequence is the order of this node being expanded children is the ID of the nodes that are children to this node, which should be a list (empty list if no children) actions is the list of actions that correspond to the children in children, which should be a list of equal length with children (the display format is not constrained) removed indicates if this node has been removed due to being a duplicated node or creating a redundant path parent is the ID of the node that is parent to this node For example, to produce a search tree as follows, .expseq { font: normal 10px sans-serif; } 0,0 1 5,0 2 n 0,3 w 0,4 e 5,0 n 5,3 s 1,0 w this is the value of the search_tree . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 [ { \"id\" : 1 , \"state\" : \"0,0\" , \"expansionsequence\" : 1 , \"children\" : [ 2 , 3 , 4 ], \"actions\" : [ \"n\" , \"w\" , \"e\" ], \"removed\" : False , \"parent\" : None }, { \"id\" : 2 , \"state\" : \"5,0\" , \"expansionsequence\" : 2 , \"children\" : [ 5 , 6 , 7 ], \"actions\" : [ \"n\" , \"s\" , \"w\" ], \"removed\" : False , \"parent\" : 1 }, { \"id\" : 3 , \"state\" : \"0,3\" , \"expansionsequence\" : - 1 , \"children\" : [], \"actions\" : [], \"removed\" : False , \"parent\" : 1 }, { \"id\" : 4 , \"state\" : \"0,4\" , \"expansionsequence\" : - 1 , \"children\" : [], \"actions\" : [], \"removed\" : False , \"parent\" : 1 }, { \"id\" : 5 , \"state\" : \"5,0\" , \"expansionsequence\" : - 1 , \"children\" : [], \"actions\" : [], \"removed\" : True , \"parent\" : 2 }, { \"id\" : 6 , \"state\" : \"5,3\" , \"expansionsequence\" : - 1 , \"children\" : [], \"actions\" : [], \"removed\" : False , \"parent\" : 2 }, { \"id\" : 7 , \"state\" : \"1,0\" , \"expansionsequence\" : - 1 , \"children\" : [], \"actions\" : [], \"removed\" : False , \"parent\" : 2 } ] Disclaimer on the testing player example An example of an/a agent/player named testing player is included under the subdirectory of players > tests . testing player provides a structure to the Player class. The solutions generated by testing player are random and disregarding the current game state. The search trees returned by testing player are hardcoded and therefore static. Your agent/player should generate the solutions and search trees using a search algorithm. Interaction between this platform and your agent This section is to provide the information of how the game platform interacts with the agent/player. You only need to focus on the coding of the agent/player. Game Agent selected Notified of success initiation Next step Solution animation display Agent/Player init run with game settings if auto progression with game states solution, search_tree if auto progression if step-by-step, click button Unit test for player.py The following code is added to the end of player.py file for testing purpose. This provides an example of initiating and running the player. The availability of this code allows you to execute the player.py file directly using python player.py to test for any error before integrating with the UI. 1 2 3 4 5 6 if __name__ == \"__main__\" : p1 = Player ({ \"maze_size\" : [ 10 , 10 ], \"static_snake_length\" : True }) sol , st = p1 . run ({ 'snake_locations' : [[ 0 , 5 ]], 'current_direction' : 'e' , 'food_locations' : [[ 6 , 7 ]]}) print ( \"Solution is:\" , sol ) print ( \"Search tree is:\" ) print ( st )","title":"Use your script as agent/player"},{"location":"player/#use-your-script-as-agentplayer","text":"","title":"Use your script as agent/player"},{"location":"player/#code-location","text":"Each agent/player is a direcotry resides in root directory > app > players directory. To create a new agent/player, create a directory in the players directory, for example, a directory with the name of super_player . The agent/player is the player.py file inside that directory. snake-game app players super_players player.py","title":"Code location"},{"location":"player/#code-format","text":"The player.py file should consist of the class Player as structured as follows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Player (): name = \"testing player\" informed = False group = \"Children of Odin\" members = [ [ \"Thor\" , \"12834823\" ], [ \"Loki\" , \"98854678\" ], [ \"Hela\" , \"87654654\" ] ] def __init__ ( self , setup ): ... def run ( self , problem ): ... return solution , search_tree","title":"Code format"},{"location":"player/#class-name","text":"The name of the class must be Player .","title":"Class name"},{"location":"player/#agentplayer-information","text":"Name your agent/player using the class attribute name and define if the agent/player is using informed or uninformed search with the class attribute informed . For informed search 1 informed = True For uninformed search 1 informed = False","title":"Agent/player information"},{"location":"player/#group-information","text":"Include your group information as the class attributes for the Player class. This includes your group name ( group ) and group members ( members ).","title":"Group information"},{"location":"player/#__init__-function","text":"The __init__ function is the function to initiate the player. Apart from self , the function will also receive setup as an input parameter. The format of the setup is 1 2 3 4 { maze_size : [ int , int ], static_snake_length : bool } maze_size is an array of length two. The first item is the number of rows and the second item is the number of columns of the maze. static_snake_length is a boolean object to indicate if the snake length is static ( True ) or dynamic ( False ).","title":"__init__() function"},{"location":"player/#run-function","text":"The run function is the function to implement the search algorithm. The function will take the input parameter of problem , which contains the current game state including the snake locations ( snake_locations ), current direction of the snake ( current_direction ), and the food locations ( food_locations ) in the following format: 1 2 3 4 5 { snake_locations : [[ int , int ],[ int , int ], ... ], current_direction : str , food_locations : [[ int , int ],[ int , int ], ... ], } snake_locations is an array of the locations of the snake's body, starting from the head to the tail. The locations are given in the form of the coordinates [x,y] , i.e. [column, row] , with [0,0] at the top left corner of the maze. As an example, for a maze of 5 rows and 6 columns, the top right corner is [5,0] , the bottom left corner is [0,4] , and the bottom right corner is [5,4] . current_direction is the current direction of the snake, specified as north n , south s , west w , or east e . food_locations is an array of the locations of the food on the game field. The locations are specified in the form of coordinates identical to snake_locations . The run function is expected to return two variables, solution and search_tree . solution is the series of actions for the snake from the current location to capture the food. The actions should be specified as north n , south s , west w , and east e . Each action will move the snake for 1 square in the specified direction. search_tree is the search tree that has been generated from the search algorithm the snake used to obtain the solution . search_tree should be a list of dictionary objects that gives us the information of each node in the search tree. Each object should be 1 2 3 4 5 6 7 8 9 { \"id\" : 2 , \"state\" : \"5,0,0\" , \"expansionsequence\" : 2 , \"children\" : [ 5 , 6 , 7 ], \"actions\" : [ \"src2one\" , \"src2two\" , \"one2three\" ], \"removed\" : False , \"parent\" : 1 }, id is the ID of this node, which should be unique for every node state is the state of this node, which should be a string (the display format is not constrained) expansionsequence is the order of this node being expanded children is the ID of the nodes that are children to this node, which should be a list (empty list if no children) actions is the list of actions that correspond to the children in children, which should be a list of equal length with children (the display format is not constrained) removed indicates if this node has been removed due to being a duplicated node or creating a redundant path parent is the ID of the node that is parent to this node For example, to produce a search tree as follows, .expseq { font: normal 10px sans-serif; } 0,0 1 5,0 2 n 0,3 w 0,4 e 5,0 n 5,3 s 1,0 w this is the value of the search_tree . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 [ { \"id\" : 1 , \"state\" : \"0,0\" , \"expansionsequence\" : 1 , \"children\" : [ 2 , 3 , 4 ], \"actions\" : [ \"n\" , \"w\" , \"e\" ], \"removed\" : False , \"parent\" : None }, { \"id\" : 2 , \"state\" : \"5,0\" , \"expansionsequence\" : 2 , \"children\" : [ 5 , 6 , 7 ], \"actions\" : [ \"n\" , \"s\" , \"w\" ], \"removed\" : False , \"parent\" : 1 }, { \"id\" : 3 , \"state\" : \"0,3\" , \"expansionsequence\" : - 1 , \"children\" : [], \"actions\" : [], \"removed\" : False , \"parent\" : 1 }, { \"id\" : 4 , \"state\" : \"0,4\" , \"expansionsequence\" : - 1 , \"children\" : [], \"actions\" : [], \"removed\" : False , \"parent\" : 1 }, { \"id\" : 5 , \"state\" : \"5,0\" , \"expansionsequence\" : - 1 , \"children\" : [], \"actions\" : [], \"removed\" : True , \"parent\" : 2 }, { \"id\" : 6 , \"state\" : \"5,3\" , \"expansionsequence\" : - 1 , \"children\" : [], \"actions\" : [], \"removed\" : False , \"parent\" : 2 }, { \"id\" : 7 , \"state\" : \"1,0\" , \"expansionsequence\" : - 1 , \"children\" : [], \"actions\" : [], \"removed\" : False , \"parent\" : 2 } ]","title":"run() function"},{"location":"player/#disclaimer-on-the-testing-player-example","text":"An example of an/a agent/player named testing player is included under the subdirectory of players > tests . testing player provides a structure to the Player class. The solutions generated by testing player are random and disregarding the current game state. The search trees returned by testing player are hardcoded and therefore static. Your agent/player should generate the solutions and search trees using a search algorithm.","title":"Disclaimer on the testing player example"},{"location":"player/#interaction-between-this-platform-and-your-agent","text":"This section is to provide the information of how the game platform interacts with the agent/player. You only need to focus on the coding of the agent/player. Game Agent selected Notified of success initiation Next step Solution animation display Agent/Player init run with game settings if auto progression with game states solution, search_tree if auto progression if step-by-step, click button","title":"Interaction between this platform and your agent"},{"location":"player/#unit-test-for-playerpy","text":"The following code is added to the end of player.py file for testing purpose. This provides an example of initiating and running the player. The availability of this code allows you to execute the player.py file directly using python player.py to test for any error before integrating with the UI. 1 2 3 4 5 6 if __name__ == \"__main__\" : p1 = Player ({ \"maze_size\" : [ 10 , 10 ], \"static_snake_length\" : True }) sol , st = p1 . run ({ 'snake_locations' : [[ 0 , 5 ]], 'current_direction' : 'e' , 'food_locations' : [[ 6 , 7 ]]}) print ( \"Solution is:\" , sol ) print ( \"Search tree is:\" ) print ( st )","title":"Unit test for player.py"},{"location":"settings/","text":"Game settings Maze size Maze size can be modified by specifying the row \u00d7 column . Snake length Snake length controls the growing of the snake after eating a food. Dynamic snake lenth The snake will grow by one for each food it eats. Fixed snake length The snake length will maintain from the beginning to the end. Any food eaten will not change the length of the snake. Starting snake length This defines the snake length at the beginning of a game. Food number This defines the number of food generated when no food is available on the game field. For multiple food, new food will only be generated when all the food is consumed. Confirmation You will need to confirm the change before the settings takes place, and the game will be reset.","title":"Game settings"},{"location":"settings/#game-settings","text":"","title":"Game settings"},{"location":"settings/#maze-size","text":"Maze size can be modified by specifying the row \u00d7 column .","title":"Maze size"},{"location":"settings/#snake-length","text":"Snake length controls the growing of the snake after eating a food. Dynamic snake lenth The snake will grow by one for each food it eats. Fixed snake length The snake length will maintain from the beginning to the end. Any food eaten will not change the length of the snake.","title":"Snake length"},{"location":"settings/#starting-snake-length","text":"This defines the snake length at the beginning of a game.","title":"Starting snake length"},{"location":"settings/#food-number","text":"This defines the number of food generated when no food is available on the game field. For multiple food, new food will only be generated when all the food is consumed.","title":"Food number"},{"location":"settings/#confirmation","text":"You will need to confirm the change before the settings takes place, and the game will be reset.","title":"Confirmation"},{"location":"setup/","text":"Setup of the development environment Getting the source Download or clone the code from snake-game . Setup Python environment With Anaconda Open a terminal at the root directory of this repository. If you have an anaconda environment called snake-game and you do not wish to replace it, go to environment.yml and change the name of the environment on the first line: 1 name: snake-game Create an anaconda environment with the environment.yml file: 1 conda env create -f environment.yml Info 1 The `environment.yml` was created with `conda env export --from-history > environment.yml` Attention If the command conda cannot be found, you can either add the anaconda binaries folder to system path, or open the terminal from anaconda navigator by clicking the triangle icon next to the base environment Activate the environment (replace snake-game with your environment name if you have changed it in step 2): 1 conda activate snake-game Without Anaconda Open a terminal at the root directory of this repository. [ Optional ] Create a virtual environment called snake-game to avoid messing with your python installation. 1 python -m venv snake-game Activate the virtual environment POSIX (Linux/macOS) 1 source snake-game/bin/activate Windows (cmd.exe) 1 snake-game\\Scripts\\activate.bat Windows (PowerShell) 1 snake-game\\Scripts\\Activate.ps1 Install the required libraries. 1 pip install -r environment.txt Info 1 The `environment.txt` was created with `pip list --format=freeze > environment.txt` Activate the Python Server Activate the environment if it is not activated yet. Change into the app directory. 1 cd app Run the server with: 1 uvicorn server:app --reload The terminal output will display this if the server is started correctly. You may have a different URL. 1 2 3 4 5 INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) INFO: Started reloader process [28720] INFO: Started server process [28722] INFO: Waiting for application startup. INFO: Application startup complete. Open your browser, go to the URL that has been provided in the terminal. API testing Activate the python server Append /docs to the end of the local server URL. For instance, if the URL is http://127.0.0.1:8000 , then go to http://127.0.0.1:8000/docs","title":"Setup"},{"location":"setup/#setup-of-the-development-environment","text":"","title":"Setup of the development environment"},{"location":"setup/#getting-the-source","text":"Download or clone the code from snake-game .","title":"Getting the source"},{"location":"setup/#setup-python-environment","text":"With Anaconda Open a terminal at the root directory of this repository. If you have an anaconda environment called snake-game and you do not wish to replace it, go to environment.yml and change the name of the environment on the first line: 1 name: snake-game Create an anaconda environment with the environment.yml file: 1 conda env create -f environment.yml Info 1 The `environment.yml` was created with `conda env export --from-history > environment.yml` Attention If the command conda cannot be found, you can either add the anaconda binaries folder to system path, or open the terminal from anaconda navigator by clicking the triangle icon next to the base environment Activate the environment (replace snake-game with your environment name if you have changed it in step 2): 1 conda activate snake-game Without Anaconda Open a terminal at the root directory of this repository. [ Optional ] Create a virtual environment called snake-game to avoid messing with your python installation. 1 python -m venv snake-game Activate the virtual environment POSIX (Linux/macOS) 1 source snake-game/bin/activate Windows (cmd.exe) 1 snake-game\\Scripts\\activate.bat Windows (PowerShell) 1 snake-game\\Scripts\\Activate.ps1 Install the required libraries. 1 pip install -r environment.txt Info 1 The `environment.txt` was created with `pip list --format=freeze > environment.txt`","title":"Setup Python environment"},{"location":"setup/#activate-the-python-server","text":"Activate the environment if it is not activated yet. Change into the app directory. 1 cd app Run the server with: 1 uvicorn server:app --reload The terminal output will display this if the server is started correctly. You may have a different URL. 1 2 3 4 5 INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) INFO: Started reloader process [28720] INFO: Started server process [28722] INFO: Waiting for application startup. INFO: Application startup complete. Open your browser, go to the URL that has been provided in the terminal.","title":"Activate the Python Server"},{"location":"setup/#api-testing","text":"Activate the python server Append /docs to the end of the local server URL. For instance, if the URL is http://127.0.0.1:8000 , then go to http://127.0.0.1:8000/docs","title":"API testing"},{"location":"submission/","text":"Submission Submission deadline Submission on MS Teams by 21 May 2021 5 p.m. (penalty applies for submission later than 6 p.m.). One submission per group by any group member. Submission file A zip file and a report. zip file ( .zip ) [Alphanumeric version of your group name] [player 1 name] player.py [player 2 name] player.py Report ( .pdf ) The report should include the problem description, the explanation of problem formulation and search algorithm implementation, the results of the algorithms, and the discussion to evaluate the performance of the agents/players. Here are some questions that may help you in considering the content to be included in the report. What is the problem the algorithm need to solve? How do the different parameters of the problem fit into the algorithm? How do you make the algorithm understand and be able to solve this particular problem? Do the results achieve the aim of solving the problem (can you obtain the solution)? How are the performance of the algorithms (how good are the solutions)? Be reminded that these questions are just guidelines and you should not just directly answer these questions. Marks distribution Criteria % Remark Functional codes 20 Your code should work without throwing exceptions Scored points 10 This is based on the amount of points your agents/players scored during the game relative to other groups Content correctness 20 The contents in your report should be correct Content continuity 15 Your report should have continuity from one section to the next section Report representation 15 Your report should be consistent and able to communicate the contents effectively Discussion/Analysis 20 The discussion and the analysis should be clear and logical Total 100 \u00d7 \\(\\frac{15}{100}\\) = 15 This assignment contributes to 15% of the course","title":"Submission"},{"location":"submission/#submission","text":"","title":"Submission"},{"location":"submission/#submission-deadline","text":"Submission on MS Teams by 21 May 2021 5 p.m. (penalty applies for submission later than 6 p.m.). One submission per group by any group member.","title":"Submission deadline"},{"location":"submission/#submission-file","text":"A zip file and a report. zip file ( .zip ) [Alphanumeric version of your group name] [player 1 name] player.py [player 2 name] player.py Report ( .pdf ) The report should include the problem description, the explanation of problem formulation and search algorithm implementation, the results of the algorithms, and the discussion to evaluate the performance of the agents/players. Here are some questions that may help you in considering the content to be included in the report. What is the problem the algorithm need to solve? How do the different parameters of the problem fit into the algorithm? How do you make the algorithm understand and be able to solve this particular problem? Do the results achieve the aim of solving the problem (can you obtain the solution)? How are the performance of the algorithms (how good are the solutions)? Be reminded that these questions are just guidelines and you should not just directly answer these questions.","title":"Submission file"},{"location":"submission/#marks-distribution","text":"Criteria % Remark Functional codes 20 Your code should work without throwing exceptions Scored points 10 This is based on the amount of points your agents/players scored during the game relative to other groups Content correctness 20 The contents in your report should be correct Content continuity 15 Your report should have continuity from one section to the next section Report representation 15 Your report should be consistent and able to communicate the contents effectively Discussion/Analysis 20 The discussion and the analysis should be clear and logical Total 100 \u00d7 \\(\\frac{15}{100}\\) = 15 This assignment contributes to 15% of the course","title":"Marks distribution"},{"location":"ui/","text":"UI Overview text { font-size: 50px; text-anchor: middle; dominant-baseline: middle; } rect { fill: white; fill-opacity: 0.5; stroke: teal; stroke-width: 10; } Game field Point display Game controls /settings Logs","title":"UI"},{"location":"ui/#ui-overview","text":"text { font-size: 50px; text-anchor: middle; dominant-baseline: middle; } rect { fill: white; fill-opacity: 0.5; stroke: teal; stroke-width: 10; } Game field Point display Game controls /settings Logs","title":"UI Overview"}]}